

InvMillsRatio <- function(x, lt) {

  ans <- exp(dnorm(x, log=TRUE) - pnorm(-x, lower.tail=lt, log.p=TRUE))
  return(ans)
}

EMProbit <- function(beta.hat, X, y) {

  linear.pred <- as.vector(X%*%beta.hat)
  ZZ <- linear.pred + y*InvMillsRatio(linear.pred, lt=FALSE) - (1 - y)*InvMillsRatio(linear.pred, lt=TRUE)

  newbeta.hat <- solve(crossprod(X, X), crossprod(X, ZZ))
  return(newbeta.hat)
}

LogLikProbit <- function(beta.hat, X, y) {

  fvals1 <- pnorm(X%*%beta.hat, log.p=TRUE)
  fvals2 <- pnorm(X%*%beta.hat, log.p=TRUE, lower.tail=FALSE)
  ans <- sum(y*fvals1) + sum((1 - y)*fvals2)
  return(ans)
}

NegLogLikProbit <- function(beta.hat, X, y) {

  fvals1 <- pnorm(X%*%beta.hat, log.p=TRUE)
  fvals2 <- pnorm(X%*%beta.hat, log.p=TRUE, lower.tail=FALSE)
  ans <- sum(y*fvals1) + sum((1 - y)*fvals2)
  return((-1)*ans)
}

ProbitGenerate <- function(beta.vec, X) {
    n <- nrow(X)
    lin.pred <- X%*%beta.vec
    pp <- pnorm(lin.pred)
    UU <- runif(n)
    yy <- rep(0, n)
    yy[UU < pp] <- 1
    return(yy)
}

